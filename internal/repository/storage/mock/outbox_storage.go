// Code generated by MockGen. DO NOT EDIT.
// Source: order-service/internal/repository/storage (interfaces: OutboxStorage)
//
// Generated by this command:
//
//	mockgen -destination=./mock/outbox_storage.go -package=mock order-service/internal/repository/storage OutboxStorage
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	models "order-service/internal/models"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockOutboxStorage is a mock of OutboxStorage interface.
type MockOutboxStorage struct {
	ctrl     *gomock.Controller
	recorder *MockOutboxStorageMockRecorder
	isgomock struct{}
}

// MockOutboxStorageMockRecorder is the mock recorder for MockOutboxStorage.
type MockOutboxStorageMockRecorder struct {
	mock *MockOutboxStorage
}

// NewMockOutboxStorage creates a new mock instance.
func NewMockOutboxStorage(ctrl *gomock.Controller) *MockOutboxStorage {
	mock := &MockOutboxStorage{ctrl: ctrl}
	mock.recorder = &MockOutboxStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOutboxStorage) EXPECT() *MockOutboxStorageMockRecorder {
	return m.recorder
}

// CreateOutboxMessage mocks base method.
func (m *MockOutboxStorage) CreateOutboxMessage(ctx context.Context, key string, message []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOutboxMessage", ctx, key, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOutboxMessage indicates an expected call of CreateOutboxMessage.
func (mr *MockOutboxStorageMockRecorder) CreateOutboxMessage(ctx, key, message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOutboxMessage", reflect.TypeOf((*MockOutboxStorage)(nil).CreateOutboxMessage), ctx, key, message)
}

// GetOutBoxMessage mocks base method.
func (m *MockOutboxStorage) GetOutBoxMessage(ctx context.Context) (*models.OutboxMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOutBoxMessage", ctx)
	ret0, _ := ret[0].(*models.OutboxMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOutBoxMessage indicates an expected call of GetOutBoxMessage.
func (mr *MockOutboxStorageMockRecorder) GetOutBoxMessage(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOutBoxMessage", reflect.TypeOf((*MockOutboxStorage)(nil).GetOutBoxMessage), ctx)
}

// MarkAsSent mocks base method.
func (m *MockOutboxStorage) MarkAsSent(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkAsSent", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkAsSent indicates an expected call of MarkAsSent.
func (mr *MockOutboxStorageMockRecorder) MarkAsSent(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkAsSent", reflect.TypeOf((*MockOutboxStorage)(nil).MarkAsSent), ctx, id)
}
