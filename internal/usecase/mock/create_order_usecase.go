// Code generated by MockGen. DO NOT EDIT.
// Source: order-service/internal/usecase (interfaces: CreateOrderUseCase)
//
// Generated by this command:
//
//	mockgen -destination=./mock/create_order_usecase.go -package=mock order-service/internal/usecase CreateOrderUseCase
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	domain "order-service/internal/domain"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockCreateOrderUseCase is a mock of CreateOrderUseCase interface.
type MockCreateOrderUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockCreateOrderUseCaseMockRecorder
	isgomock struct{}
}

// MockCreateOrderUseCaseMockRecorder is the mock recorder for MockCreateOrderUseCase.
type MockCreateOrderUseCaseMockRecorder struct {
	mock *MockCreateOrderUseCase
}

// NewMockCreateOrderUseCase creates a new mock instance.
func NewMockCreateOrderUseCase(ctrl *gomock.Controller) *MockCreateOrderUseCase {
	mock := &MockCreateOrderUseCase{ctrl: ctrl}
	mock.recorder = &MockCreateOrderUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCreateOrderUseCase) EXPECT() *MockCreateOrderUseCaseMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockCreateOrderUseCase) Execute(ctx context.Context, order domain.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockCreateOrderUseCaseMockRecorder) Execute(ctx, order any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockCreateOrderUseCase)(nil).Execute), ctx, order)
}
