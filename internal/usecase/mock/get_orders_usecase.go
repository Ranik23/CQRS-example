// Code generated by MockGen. DO NOT EDIT.
// Source: order-service/internal/usecase (interfaces: GetOrdersUseCase)
//
// Generated by this command:
//
//	mockgen -destination=./mock/get_orders_usecase.go -package=mock order-service/internal/usecase GetOrdersUseCase
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	domain "order-service/internal/domain"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockGetOrdersUseCase is a mock of GetOrdersUseCase interface.
type MockGetOrdersUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockGetOrdersUseCaseMockRecorder
	isgomock struct{}
}

// MockGetOrdersUseCaseMockRecorder is the mock recorder for MockGetOrdersUseCase.
type MockGetOrdersUseCaseMockRecorder struct {
	mock *MockGetOrdersUseCase
}

// NewMockGetOrdersUseCase creates a new mock instance.
func NewMockGetOrdersUseCase(ctrl *gomock.Controller) *MockGetOrdersUseCase {
	mock := &MockGetOrdersUseCase{ctrl: ctrl}
	mock.recorder = &MockGetOrdersUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetOrdersUseCase) EXPECT() *MockGetOrdersUseCaseMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockGetOrdersUseCase) Execute(ctx context.Context, userID int64) ([]domain.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, userID)
	ret0, _ := ret[0].([]domain.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockGetOrdersUseCaseMockRecorder) Execute(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockGetOrdersUseCase)(nil).Execute), ctx, userID)
}
